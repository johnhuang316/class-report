warning: in the working copy of 'services/storage_service.py', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/main.py b/main.py[m
[1mindex 95f17c4..f266c5f 100644[m
[1m--- a/main.py[m
[1m+++ b/main.py[m
[36m@@ -19,10 +19,10 @@[m [mfrom services.gemini_service import GeminiService[m
 from services.notion_service import NotionService[m
 from services.storage_service import StorageService[m
 from services.format_validator_service import FormatValidatorService[m
[32m+[m[32mfrom utils.common.logging_utils import get_logger[m
 [m
 # Configure logging[m
[31m-logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')[m
[31m-logger = logging.getLogger("main")[m
[32m+[m[32mlogger = get_logger("main")[m
 [m
 # Load environment variables[m
 from dotenv import load_dotenv[m
[36m@@ -46,7 +46,7 @@[m [mapp = FastAPI([m
 app.mount("/static", StaticFiles(directory="static"), name="static")[m
 templates = Jinja2Templates(directory="templates")[m
 [m
[31m-# Initialize API clients[m
[32m+[m[32m# Initialize services[m
 try:[m
     # Initialize logger[m
     logger.info("Application starting...")[m
[36m@@ -64,30 +64,32 @@[m [mtry:[m
     if not GCS_BUCKET_NAME:[m
         logger.warning("Environment variable GCS_BUCKET_NAME is not set. Please set it in the .env file")[m
     [m
[31m-    # Initialize Gemini client[m
[31m-    gemini_client = GeminiService(GEMINI_API_KEY)[m
[31m-    logger.info("Gemini client initialized successfully")[m
[32m+[m[32m    # Initialize services[m
[32m+[m[32m    gemini_service = GeminiService(GEMINI_API_KEY)[m
[32m+[m[32m    logger.info("Gemini service initialized successfully")[m
     [m
[31m-    # Initialize Notion client with storage service handling inside[m
[31m-    notion_client = NotionService(NOTION_API_KEY)[m
[31m-    logger.info("Notion client initialized successfully")[m
[32m+[m[32m    notion_service = NotionService(NOTION_API_KEY)[m
[32m+[m[32m    logger.info("Notion service initialized successfully")[m
     [m
[31m-    # Initialize Format Validator service[m
[31m-    format_validator = FormatValidatorService(GEMINI_API_KEY)[m
[32m+[m[32m    format_validator_service = FormatValidatorService(GEMINI_API_KEY)[m
     logger.info("Format Validator service initialized successfully")[m
     [m
[31m-    # Initialize Storage client (optional)[m
[32m+[m[32m    # Initialize Storage service (optional)[m
     try:[m
[31m-        storage_client = StorageService()[m
[31m-        logger.info("Storage client initialized successfully")[m
[32m+[m[32m        storage_service = StorageService()[m
[32m+[m[32m        logger.info("Storage service initialized successfully")[m
     except Exception as storage_error:[m
[31m-        logger.warning(f"Storage client initialization failed: {str(storage_error)}")[m
[32m+[m[32m        logger.warning(f"Storage service initialization failed: {str(storage_error)}")[m
         logger.warning("Application will continue without GCS storage capabilities")[m
[31m-        storage_client = None[m
[32m+[m[32m        storage_service = None[m
     [m
 except Exception as e:[m
     logger.error(f"Error during initialization: {str(e)}")[m
     logger.exception(e)[m
[32m+[m[32m    gemini_service = None[m
[32m+[m[32m    notion_service = None[m
[32m+[m[32m    format_validator_service = None[m
[32m+[m[32m    storage_service = None[m
 [m
 # Define request model for API[m
 class ReportRequest(BaseModel):[m
[36m@@ -95,10 +97,6 @@[m [mclass ReportRequest(BaseModel):[m
     image_paths: Optional[List[str]] = [][m
     report_date: Optional[str] = None[m
 [m
[31m-class SignedUrlRequest(BaseModel):[m
[31m-    file_name: str[m
[31m-    content_type: Optional[str] = None[m
[31m-[m
 # Health check endpoint for monitoring[m
 @app.get("/health")[m
 async def health_check():[m
[36m@@ -115,21 +113,22 @@[m [masync def health_check():[m
         "notion_database_id": bool(NOTION_DATABASE_ID)[m
     }[m
     [m
[31m-    # Check if clients are initialized[m
[31m-    clients_status = {[m
[31m-        "gemini_client": "gemini_client" in globals(),[m
[31m-        "notion_client": "notion_client" in globals(),[m
[31m-        "storage_client": "storage_client" in globals()[m
[32m+[m[32m    # Check if services are initialized[m
[32m+[m[32m    services_status = {[m
[32m+[m[32m        "gemini_service": gemini_service is not None,[m
[32m+[m[32m        "notion_service": notion_service is not None,[m
[32m+[m[32m        "format_validator_service": format_validator_service is not None,[m
[32m+[m[32m        "storage_service": storage_service is not None[m
     }[m
     [m
     # Overall status[m
[31m-    status = "healthy" if all(api_keys_status.values()) and all(clients_status.values()) else "degraded"[m
[32m+[m[32m    status = "healthy" if all(api_keys_status.values()) and all(services_status.values()) else "degraded"[m
     [m
     return {[m
         "status": status,[m
         "version": "1.0.0",[m
         "api_keys": api_keys_status,[m
[31m-        "clients": clients_status[m
[32m+[m[32m        "services": services_status[m
     }[m
 [m
 @app.get("/", response_class=HTMLResponse)[m
[36m@@ -147,11 +146,15 @@[m [masync def generate_report_api(report_request: ReportRequest):[m
     logger.info(f"Received API request to generate report")[m
     [m
     try:[m
[32m+[m[32m        # Check if services are available[m
[32m+[m[32m        if not gemini_service or not notion_service or not format_validator_service:[m
[32m+[m[32m            raise HTTPException(status_code=503, detail="Required services are not available")[m
[32m+[m[41m            [m
         # Generate content using Gemini[m
[31m-        report_text = gemini_client.generate_report(report_request.content)[m
[32m+[m[32m        report_text = gemini_service.generate_report(report_request.content)[m
         [m
         # Validate and fix Notion format compatibility[m
[31m-        is_valid, validated_report_text = format_validator.validate_notion_format(report_text)[m
[32m+[m[32m        is_valid, validated_report_text = format_validator_service.validate_notion_format(report_text)[m
         if not is_valid:[m
             logger.warning("Format validation failed, using original content")[m
         else:[m
[36m@@ -164,7 +167,7 @@[m [masync def generate_report_api(report_request: ReportRequest):[m
         image_paths = report_request.image_paths or [][m
         [m
         # Create Notion page[m
[31m-        page_url, page_id = notion_client.create_page([m
[32m+[m[32m        page_url, page_id = notion_service.create_page([m
             title="Sunday School Weekly Report",[m
             content=report_content,[m
             image_paths=image_paths,[m
[36m@@ -182,41 +185,6 @@[m [masync def generate_report_api(report_request: ReportRequest):[m
         logger.error(f"Error generating report: {str(e)}")[m
         raise HTTPException(status_code=500, detail=f"Failed to generate report: {str(e)}")[m
 [m
[31m-@app.post("/get-signed-url", response_class=JSONResponse)[m
[31m-async def get_signed_url(request: SignedUrlRequest):[m
[31m-    """[m
[31m-    Áç≤ÂèñÁî®ÊñºÁõ¥Êé•‰∏äÂÇ≥Âà∞ GCS ÁöÑÁ∞ΩÂêç URL[m
[31m-    [m
[31m-    Args:[m
[31m-        request: ÂåÖÂê´Êñá‰ª∂ÂêçÂíåÂÖßÂÆπÈ°ûÂûãÁöÑË´ãÊ±Ç[m
[31m-        [m
[31m-    Returns:[m
[31m-        ÂåÖÂê´Á∞ΩÂêç URL ÂíåÂÖ∂‰ªñ‰ø°ÊÅØÁöÑ JSON ÈüøÊáâ[m
[31m-    """[m
[31m-    logger.info(f"Received request for signed URL: {request.file_name}")[m
[31m-    [m
[31m-    try:[m
[31m-        # Ê™¢Êü• storage_service ÊòØÂê¶ÂèØÁî®[m
[31m-        if not storage_client:[m
[31m-            logger.error("Storage service is not available")[m
[31m-            raise HTTPException(status_code=500, detail="Storage service is not available")[m
[31m-        [m
[31m-        # ÁîüÊàêÁ∞ΩÂêç URL[m
[31m-        signed_url = storage_client.generate_signed_url([m
[31m-            file_n